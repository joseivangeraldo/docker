######ANOTHER COURSE #######################

docker run = Start a container 
docker ps  = lista todos os containers que estão rodando
docker ps -a = lista todos os containers
docker stop = para o container
docker rm = remover o container
docker images = lista das imagens
docker rmi = remover imagens
docker pull = download a imagem

$ docker pull nginx
RUNNNIG A CONTAINER FROM Images
$ docker run  nginx:latest
$ docker run -d nginx:latest

EXPOSING PORTS:
docker run -d -p 8080:80 nginx:latest

EXPOSING MULTIPLE PORTS:
docker run -d -p 3000:80 -p 8080:80 nginx:latest

MANAGING CONTAINERS
$ docker rm $(docker ps -aq)

NAMING CONTAINERS
$ docker run --name website -d -p 3000:80 -p 8080:80 nginx:latest

MOST REPLAYED
"ID\t{{.ID}}\nNAME\t{{.Names}}\nImage\t{{.Image}}\nPORTS\t{{.Ports}}\nCOMMAND\t{{.Command}}\nCREATED\t{{.CreatedAt}}\nSTATUS\t{{.Status}}\n"

$ docker ps --format="ID\t{{.ID}}\nNAME\t{{.Names}}\nImage\t{{.Image}}\nPORTS\t{{.Ports}}\nCOMMAND\t{{.Command}}\nCREATED\t{{.CreatedAt}}\nSTATUS\t{{.Status}}\n"

DOCKER VOLUMES
CRIAR DIRETORIO --> website
$ docker run --name website -d -p 3000:80 -v $(pwd):/usr/share/nginx/html:ro nginx:latest

SHARING VOLUME BETWEEN CONTAINERS
$ docker run --name website-copy --volumes-from website -d -p 9000:80 nginx:latest
$ docker exec -it website bash

CUSTOMISE WEBSITE
PESQUISAR BOOTSTRAP SINGLE PAGE TEMPLATE
Basic Usage
After downloading, simply edit the HTML and CSS files included with dist directory.
These are the only files you need to worry about, you can ignore everything else! 
To preview the changes you make to the code, you can open the index.html file in your web browser.

CREATING DOCKERFILE
FROM nginx:latest
ADD . /usr/share/nginx/html

BUILDING IMAGES
$ docker build --tag website:latest .
$ docker run --name website -p 8080:80 -d website:latest

NODE AND JS

$ mkdir user-service-api
$ node --version

$ npm install --save express
$ node index.js

EXEMPLO HELLO WORLD (NODE JS)
const express = require('express')
const app = express()
const port = 3000

RUN NODE JS AND APP CONTAINER

app.get('/', (req, res) => {
  res.send('Hello World!')
})

app.listen(port, () => {
  console.log(`Example app listening on port ${port}`)
})

CRIADO UM ARRAY DE JSON
const express = require('express')
const app = express()
const port = 3000

app.get('/', (req, res) => {
  res.json([{
    name: 'Bob',
    email: 'bob@gmail.com'

  }])
})

app.listen(port, () => {
  console.log(`Example app listening on port ${port}`)
})

DOCKERFILE FOR NODE JS
FROM node:latest
WORKDIR /app
ADD . .
RUN npm install
CMD node index.js

RUNNING NODE JS APP CONTAINER
$ docker image ls
$ docker run --name user-api -d -p 3000:3000 user-service-api:latest

.DOCKERIGNORE
Não copiar aqrquivos que ja vao ser criados
criar arquivo .dockerignore:

node_modules
Dockerfile
.git
$ docker build -t user-service-api:latest .

CACHING AND LAYERS
PARA DEMONSTRAR INSTALANDO PACOTES QUE NÃO PRECISO
$ npm i -S react webpack gulp grunt

FROM node:latest
WORKDIR /app
ADD package*.json ./
RUN npm install
ADD . .
CMD node index.js

$ docker run --name user-api -d -p 3000:3000 user-service-api:latest

ALPINE:
PULLING ALPINE DOCKER
Baixar as vrsões que são baseadas em alpine.Porque são mais leves
$ docker pull nginx:alpine
$ docker pull node:lts-alpine

SWITCHING TO ALPINE
